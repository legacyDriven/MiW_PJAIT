% Definicje dynamicznych predykatów
:- dynamic player/2.  % player(lokalizacja, bron) - przechowuje informacje o graczu
:- dynamic enemy/3.  % enemy(lokalizacja, bron, status) - przechowuje informacje o wrogach
:- dynamic bomb/1.  % bomb(lokalizacja) - przechowuje informacje o bombie
:- dynamic bombPlanted/2. % bombPlanted(Site, Position) - przechowuje informacje o podłożonej bombie

% [Pozostałe definicje bombsite'ów, lokalizacji i połączeń...]

% Funkcja sprawdzająca, czy istnieje połączenie między dwoma lokalizacjami
is_connected(Location1, Location2) :-
    paths(Paths),
    (member((Location1, Location2), Paths) ; member((Location2, Location1), Paths)).
    % Sprawdza, czy para lokalizacji jest częścią zdefiniowanych ścieżek

% [Definicje broni, utility...]

% Definicje rzutów utility
% utility_throw(Start, Target, Affected, Type, SuccessRate) - definiuje rzuty utility
utility_throw(t_spawn, x_box, [x_box, top_mid], smoke, 80).
utility_throw(outside_long, side_pit, [side_pit, long_corner, pit], flashbang, 80).
utility_throw(long_doors, blue, [blue, long_corner], molotov, 70).
% ... (inne rzuty utility)

% Predykat rzucania utility
throw_utility(StartPosition, UtilityType) :-
    player(StartPosition, _), % Sprawdza, czy gracz jest na odpowiedniej pozycji startowej
    utility_throw(StartPosition, TargetPosition, AffectedPositions, UtilityType, SuccessRate),
    random(0, 100, Roll), % Losowanie szansy powodzenia
    (Roll =< SuccessRate -> apply_effects(AffectedPositions, UtilityType), % Jeśli losowanie jest udane, stosuje efekty
                             format('Utility thrown from ~w to ~w affecting ~w~n', [StartPosition, TargetPosition, AffectedPositions])
                           ; format('Utility throw failed at ~w. Chance was ~d but rolled ~d.~n', [StartPosition, SuccessRate, Roll])), !.
    % Informuje gracza o powodzeniu lub niepowodzeniu rzutu

% Stosowanie efektów utility na listę pozycji
apply_effects(AffectedPositions, UtilityType) :-
    maplist(apply_effect(UtilityType), AffectedPositions).
    % Stosuje efekt utility na każdej pozycji z listy

% Stosowanie efektu utility na jedną pozycję
apply_effect(flashbang, AffectedPosition) :-
    findall(enemy(AffectedPosition, Weapon, _), enemy(AffectedPosition, Weapon, _), Enemies),
    maplist(apply_flash_effect, Enemies),
    !.
    % Stosuje efekt flashbang na wszystkich wrogach na danej pozycji
apply_effect(smoke, AffectedPosition) :-
    % Tu można dodać logikę dla efektu smoke...
    !.
apply_effect(_, _). % Dla innych utility, które nie mają dodatkowych efektów

% Zastosuj efekt flashbang na przeciwniku
apply_flash_effect(enemy(Position, Weapon, _)) :-
    retract(enemy(Position, Weapon, _)),
    assert(enemy(Position, Weapon, flashed)),
    format('Enemy at ~w is flashed~n', [Position]).
    % Zmienia status wroga na "flashed" (oszołomiony)

% Wykonanie ruchu w turze
perform_move(Position) :-
    player(CurrentPosition, Weapon),
    is_connected(CurrentPosition, Position),
    retract(player(CurrentPosition, Weapon)),
    assert(player(Position, Weapon)),
    format('Moved to ~w from ~w.~n', [Position, CurrentPosition]).
    % Pozwala graczowi przenieść się do nowej lokalizacji, jeśli jest ona połączona z aktualną

% [Reszta kodu...]
